/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.parser;

import minipython.lexer.*;
import minipython.node.*;
import minipython.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_shift;
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;

        if(actionTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Parser.class.getResourceAsStream("parser.dat")));

                // read actionTable
                int length = s.readInt();
                actionTable = new int[length][][];
                for(int i = 0; i < actionTable.length; i++)
                {
                    length = s.readInt();
                    actionTable[i] = new int[length][3];
                    for(int j = 0; j < actionTable[i].length; j++)
                    {
                        for(int k = 0; k < 3; k++)
                        {
                            actionTable[i][j][k] = s.readInt();
                        }
                    }
                }

                // read gotoTable
                length = s.readInt();
                gotoTable = new int[length][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][2];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        for(int k = 0; k < 2; k++)
                        {
                            gotoTable[i][j][k] = s.readInt();
                        }
                    }
                }

                // read errorMessages
                length = s.readInt();
                errorMessages = new String[length];
                for(int i = 0; i < errorMessages.length; i++)
                {
                    length = s.readInt();
                    StringBuffer buffer = new StringBuffer();

                    for(int j = 0; j < length; j++)
                    {
                        buffer.append(s.readChar());
                    }
                    errorMessages[i] = buffer.toString();
                }

                // read errors
                length = s.readInt();
                errors = new int[length];
                for(int i = 0; i < errors.length; i++)
                {
                    errors[i] = s.readInt();
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
            }
        }
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private void push(int numstate, ArrayList listNode) throws ParserException, LexerException, IOException
    {
	this.nodeList = listNode;

        if(!stack.hasNext())
        {
            stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int state()
    {
        State s = (State) stack.previous();
        stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return (ArrayList) ((State) stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        converter.index = -1;
        token.apply(converter);
        return converter.index;
    }

    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);

        List ign = null;
        while(true)
        {
            while(index(lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new TypedLinkedList(NodeCast.instance);
                }

                ign.add(lexer.next());
            }

            if(ign != null)
            {
                ignoredTokens.setIn(lexer.peek(), ign);
                ign = null;
            }

            last_pos = lexer.peek().getPos();
            last_line = lexer.peek().getLine();
            last_token = lexer.peek();

            int index = index(lexer.peek());
            action[0] = actionTable[state()][0][1];
            action[1] = actionTable[state()][0][2];

            int low = 1;
            int high = actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    action[0] = actionTable[state()][middle][1];
                    action[1] = actionTable[state()][middle][2];
                    break;
                }
            }

            switch(action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(lexer.next());
                        push(action[1], list);
                        last_shift = action[1];
                    }
		    break;
                case REDUCE:
                    switch(action[1])
                    {

                    case 0:
		    {
			ArrayList list = new0();
			push(goTo(0), list);
		    }
		    break;


                    case 1:
		    {
			ArrayList list = new1();
			push(goTo(0), list);
		    }
		    break;


                    case 2:
		    {
			ArrayList list = new2();
			push(goTo(1), list);
		    }
		    break;


                    case 3:
		    {
			ArrayList list = new3();
			push(goTo(1), list);
		    }
		    break;


                    case 4:
		    {
			ArrayList list = new4();
			push(goTo(1), list);
		    }
		    break;


                    case 5:
		    {
			ArrayList list = new5();
			push(goTo(2), list);
		    }
		    break;


                    case 6:
		    {
			ArrayList list = new6();
			push(goTo(2), list);
		    }
		    break;


                    case 7:
		    {
			ArrayList list = new7();
			push(goTo(2), list);
		    }
		    break;


                    case 8:
		    {
			ArrayList list = new8();
			push(goTo(2), list);
		    }
		    break;


                    case 9:
		    {
			ArrayList list = new9();
			push(goTo(3), list);
		    }
		    break;


                    case 10:
		    {
			ArrayList list = new10();
			push(goTo(4), list);
		    }
		    break;


                    case 11:
		    {
			ArrayList list = new11();
			push(goTo(4), list);
		    }
		    break;


                    case 12:
		    {
			ArrayList list = new12();
			push(goTo(5), list);
		    }
		    break;


                    case 13:
		    {
			ArrayList list = new13();
			push(goTo(5), list);
		    }
		    break;


                    case 14:
		    {
			ArrayList list = new14();
			push(goTo(5), list);
		    }
		    break;


                    case 15:
		    {
			ArrayList list = new15();
			push(goTo(5), list);
		    }
		    break;


                    case 16:
		    {
			ArrayList list = new16();
			push(goTo(5), list);
		    }
		    break;


                    case 17:
		    {
			ArrayList list = new17();
			push(goTo(5), list);
		    }
		    break;


                    case 18:
		    {
			ArrayList list = new18();
			push(goTo(5), list);
		    }
		    break;


                    case 19:
		    {
			ArrayList list = new19();
			push(goTo(5), list);
		    }
		    break;


                    case 20:
		    {
			ArrayList list = new20();
			push(goTo(5), list);
		    }
		    break;


                    case 21:
		    {
			ArrayList list = new21();
			push(goTo(5), list);
		    }
		    break;


                    case 22:
		    {
			ArrayList list = new22();
			push(goTo(5), list);
		    }
		    break;


                    case 23:
		    {
			ArrayList list = new23();
			push(goTo(5), list);
		    }
		    break;


                    case 24:
		    {
			ArrayList list = new24();
			push(goTo(5), list);
		    }
		    break;


                    case 25:
		    {
			ArrayList list = new25();
			push(goTo(5), list);
		    }
		    break;


                    case 26:
		    {
			ArrayList list = new26();
			push(goTo(5), list);
		    }
		    break;


                    case 27:
		    {
			ArrayList list = new27();
			push(goTo(5), list);
		    }
		    break;


                    case 28:
		    {
			ArrayList list = new28();
			push(goTo(5), list);
		    }
		    break;


                    case 29:
		    {
			ArrayList list = new29();
			push(goTo(5), list);
		    }
		    break;


                    case 30:
		    {
			ArrayList list = new30();
			push(goTo(6), list);
		    }
		    break;


                    case 31:
		    {
			ArrayList list = new31();
			push(goTo(7), list);
		    }
		    break;


                    case 32:
		    {
			ArrayList list = new32();
			push(goTo(7), list);
		    }
		    break;


                    case 33:
		    {
			ArrayList list = new33();
			push(goTo(7), list);
		    }
		    break;


                    case 34:
		    {
			ArrayList list = new34();
			push(goTo(8), list);
		    }
		    break;


                    case 35:
		    {
			ArrayList list = new35();
			push(goTo(9), list);
		    }
		    break;


                    case 36:
		    {
			ArrayList list = new36();
			push(goTo(9), list);
		    }
		    break;


                    case 37:
		    {
			ArrayList list = new37();
			push(goTo(9), list);
		    }
		    break;


                    case 38:
		    {
			ArrayList list = new38();
			push(goTo(10), list);
		    }
		    break;


                    case 39:
		    {
			ArrayList list = new39();
			push(goTo(10), list);
		    }
		    break;


                    case 40:
		    {
			ArrayList list = new40();
			push(goTo(10), list);
		    }
		    break;


                    case 41:
		    {
			ArrayList list = new41();
			push(goTo(11), list);
		    }
		    break;


                    case 42:
		    {
			ArrayList list = new42();
			push(goTo(11), list);
		    }
		    break;


                    case 43:
		    {
			ArrayList list = new43();
			push(goTo(11), list);
		    }
		    break;


                    case 44:
		    {
			ArrayList list = new44();
			push(goTo(11), list);
		    }
		    break;


                    case 45:
		    {
			ArrayList list = new45();
			push(goTo(11), list);
		    }
		    break;


                    case 46:
		    {
			ArrayList list = new46();
			push(goTo(12), list);
		    }
		    break;


                    case 47:
		    {
			ArrayList list = new47();
			push(goTo(12), list);
		    }
		    break;


                    case 48:
		    {
			ArrayList list = new48();
			push(goTo(13), list);
		    }
		    break;


                    case 49:
		    {
			ArrayList list = new49();
			push(goTo(13), list);
		    }
		    break;


                    case 50:
		    {
			ArrayList list = new50();
			push(goTo(13), list);
		    }
		    break;


                    case 51:
		    {
			ArrayList list = new51();
			push(goTo(13), list);
		    }
		    break;


                    case 52:
		    {
			ArrayList list = new52();
			push(goTo(14), list);
		    }
		    break;


                    case 53:
		    {
			ArrayList list = new53();
			push(goTo(14), list);
		    }
		    break;


                    case 54:
		    {
			ArrayList list = new54();
			push(goTo(14), list);
		    }
		    break;


                    case 55:
		    {
			ArrayList list = new55();
			push(goTo(14), list);
		    }
		    break;


                    case 56:
		    {
			ArrayList list = new56();
			push(goTo(15), list);
		    }
		    break;


                    case 57:
		    {
			ArrayList list = new57();
			push(goTo(16), list);
		    }
		    break;


                    case 58:
		    {
			ArrayList list = new58();
			push(goTo(16), list);
		    }
		    break;


                    case 59:
		    {
			ArrayList list = new59();
			push(goTo(16), list);
		    }
		    break;


                    case 60:
		    {
			ArrayList list = new60();
			push(goTo(17), list);
		    }
		    break;


                    case 61:
		    {
			ArrayList list = new61();
			push(goTo(17), list);
		    }
		    break;


                    case 62:
		    {
			ArrayList list = new62();
			push(goTo(17), list);
		    }
		    break;


                    case 63:
		    {
			ArrayList list = new63();
			push(goTo(17), list);
		    }
		    break;


                    case 64:
		    {
			ArrayList list = new64();
			push(goTo(18), list);
		    }
		    break;


                    case 65:
		    {
			ArrayList list = new65();
			push(goTo(18), list);
		    }
		    break;


                    case 66:
		    {
			ArrayList list = new66();
			push(goTo(19), list);
		    }
		    break;


                    case 67:
		    {
			ArrayList list = new67();
			push(goTo(19), list);
		    }
		    break;


                    case 68:
		    {
			ArrayList list = new68();
			push(goTo(20), list);
		    }
		    break;


                    case 69:
		    {
			ArrayList list = new69();
			push(goTo(20), list);
		    }
		    break;


                    case 70:
		    {
			ArrayList list = new70();
			push(goTo(21), list);
		    }
		    break;


                    case 71:
		    {
			ArrayList list = new71();
			push(goTo(21), list);
		    }
		    break;


                    case 72:
		    {
			ArrayList list = new72();
			push(goTo(22), list);
		    }
		    break;


                    case 73:
		    {
			ArrayList list = new73();
			push(goTo(22), list);
		    }
		    break;


                    case 74:
		    {
			ArrayList list = new74();
			push(goTo(23), list);
		    }
		    break;


                    case 75:
		    {
			ArrayList list = new75();
			push(goTo(23), list);
		    }
		    break;


                    case 76:
		    {
			ArrayList list = new76();
			push(goTo(24), list);
		    }
		    break;


                    case 77:
		    {
			ArrayList list = new77();
			push(goTo(24), list);
		    }
		    break;


                    case 78:
		    {
			ArrayList list = new78();
			push(goTo(25), list);
		    }
		    break;


                    case 79:
		    {
			ArrayList list = new79();
			push(goTo(25), list);
		    }
		    break;

                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) lexer.next();
                        PGoal node1 = (PGoal) ((ArrayList)pop()).get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(last_token,
                        "[" + last_line + "," + last_pos + "] " +
                        errorMessages[errors[action[1]]]);
            }
        }
    }



    ArrayList new0()
    {
        ArrayList nodeList = new ArrayList();

        PGoal pgoalNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        }

        pgoalNode1 = new AGoal(listNode2);
        }
	nodeList.add(pgoalNode1);
        return nodeList;
    }



    ArrayList new1()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PGoal pgoalNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pgoalNode1 = new AGoal(listNode3);
        }
	nodeList.add(pgoalNode1);
        return nodeList;
    }



    ArrayList new2()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PGoal1 pgoal1Node1;
        {
        TIdentifier tidentifierNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        PStatement pstatementNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        {
        }
        pstatementNode4 = (PStatement)nodeArrayList6.get(0);

        pgoal1Node1 = new AFunctGoal1(tidentifierNode2, listNode3, pstatementNode4);
        }
	nodeList.add(pgoal1Node1);
        return nodeList;
    }



    ArrayList new3()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PGoal1 pgoal1Node1;
        {
        TIdentifier tidentifierNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        PStatement pstatementNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        {
        PArgument pargumentNode3;
        pargumentNode3 = (PArgument)nodeArrayList4.get(0);
	if(pargumentNode3 != null)
	{
	  listNode4.add(pargumentNode3);
	}
        }
        pstatementNode5 = (PStatement)nodeArrayList7.get(0);

        pgoal1Node1 = new AFunctGoal1(tidentifierNode2, listNode4, pstatementNode5);
        }
	nodeList.add(pgoal1Node1);
        return nodeList;
    }



    ArrayList new4()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PGoal1 pgoal1Node1;
        {
        PStatement pstatementNode2;
        pstatementNode2 = (PStatement)nodeArrayList1.get(0);

        pgoal1Node1 = new AStatGoal1(pstatementNode2);
        }
	nodeList.add(pgoal1Node1);
        return nodeList;
    }



    ArrayList new5()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgument pargumentNode1;
        {
        TIdentifier tidentifierNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        TypedLinkedList listNode4 = new TypedLinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
        }
        {
        }

        pargumentNode1 = new AArgument(tidentifierNode2, listNode3, listNode4);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    ArrayList new6()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgument pargumentNode1;
        {
        TIdentifier tidentifierNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        TypedLinkedList listNode5 = new TypedLinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
        PValue pvalueNode3;
        pvalueNode3 = (PValue)nodeArrayList2.get(0);
	if(pvalueNode3 != null)
	{
	  listNode4.add(pvalueNode3);
	}
        }
        {
        }

        pargumentNode1 = new AArgument(tidentifierNode2, listNode4, listNode5);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    ArrayList new7()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgument pargumentNode1;
        {
        TIdentifier tidentifierNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        TypedLinkedList listNode5 = new TypedLinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
        }
        {
        TypedLinkedList listNode4 = new TypedLinkedList();
        listNode4 = (TypedLinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pargumentNode1 = new AArgument(tidentifierNode2, listNode3, listNode5);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    ArrayList new8()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgument pargumentNode1;
        {
        TIdentifier tidentifierNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        TypedLinkedList listNode6 = new TypedLinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
        PValue pvalueNode3;
        pvalueNode3 = (PValue)nodeArrayList2.get(0);
	if(pvalueNode3 != null)
	{
	  listNode4.add(pvalueNode3);
	}
        }
        {
        TypedLinkedList listNode5 = new TypedLinkedList();
        listNode5 = (TypedLinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pargumentNode1 = new AArgument(tidentifierNode2, listNode4, listNode6);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    ArrayList new9()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PValue pvalueNode1;
        pvalueNode1 = (PValue)nodeArrayList2.get(0);
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    ArrayList new10()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PIdValue pidvalueNode1;
        {
        TIdentifier tidentifierNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        {
        }

        pidvalueNode1 = new AIdValue(tidentifierNode2, listNode3);
        }
	nodeList.add(pidvalueNode1);
        return nodeList;
    }



    ArrayList new11()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PIdValue pidvalueNode1;
        {
        TIdentifier tidentifierNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        {
        PValue pvalueNode3;
        pvalueNode3 = (PValue)nodeArrayList3.get(0);
	if(pvalueNode3 != null)
	{
	  listNode4.add(pvalueNode3);
	}
        }

        pidvalueNode1 = new AIdValue(tidentifierNode2, listNode4);
        }
	nodeList.add(pidvalueNode1);
        return nodeList;
    }



    ArrayList new12()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PComparison pcomparisonNode2;
        PStatement pstatementNode3;
        pcomparisonNode2 = (PComparison)nodeArrayList2.get(0);
        pstatementNode3 = (PStatement)nodeArrayList4.get(0);

        pstatementNode1 = new AIfStatement(pcomparisonNode2, pstatementNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new13()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PComparison pcomparisonNode2;
        PStatement pstatementNode3;
        pcomparisonNode2 = (PComparison)nodeArrayList3.get(0);
        pstatementNode3 = (PStatement)nodeArrayList5.get(0);

        pstatementNode1 = new AIfStatement(pcomparisonNode2, pstatementNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new14()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PComparison pcomparisonNode2;
        PStatement pstatementNode3;
        pcomparisonNode2 = (PComparison)nodeArrayList2.get(0);
        pstatementNode3 = (PStatement)nodeArrayList4.get(0);

        pstatementNode1 = new AWhileStatement(pcomparisonNode2, pstatementNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new15()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PComparison pcomparisonNode2;
        PStatement pstatementNode3;
        pcomparisonNode2 = (PComparison)nodeArrayList3.get(0);
        pstatementNode3 = (PStatement)nodeArrayList5.get(0);

        pstatementNode1 = new AWhileStatement(pcomparisonNode2, pstatementNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new16()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TIdentifier tidentifierNode2;
        TIdentifier tidentifierNode3;
        PStatement pstatementNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList4.get(0);
        pstatementNode4 = (PStatement)nodeArrayList6.get(0);

        pstatementNode1 = new AForStatement(tidentifierNode2, tidentifierNode3, pstatementNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new17()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TIdentifier tidentifierNode2;
        TIdentifier tidentifierNode3;
        PStatement pstatementNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList3.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList5.get(0);
        pstatementNode4 = (PStatement)nodeArrayList7.get(0);

        pstatementNode1 = new AForStatement(tidentifierNode2, tidentifierNode3, pstatementNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new18()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);

        pstatementNode1 = new AReturnStatement(pexpressionNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new19()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AReturnStatement(pexpressionNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new20()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
        {
        }

        pstatementNode1 = new APrintStatement(pexpressionNode2, listNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new21()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList3.get(0);
        {
        }

        pstatementNode1 = new APrintStatement(pexpressionNode2, listNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new22()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        listNode3 = (TypedLinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pstatementNode1 = new APrintStatement(pexpressionNode2, listNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new23()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList3.get(0);
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        listNode3 = (TypedLinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pstatementNode1 = new APrintStatement(pexpressionNode2, listNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new24()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TIdentifier tidentifierNode2;
        PExpression pexpressionNode3;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        pstatementNode1 = new AAssignmentStatement(tidentifierNode2, pexpressionNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new25()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TIdentifier tidentifierNode2;
        PExpression pexpressionNode3;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AAssignmentStatement(tidentifierNode2, pexpressionNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new26()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TIdentifier tidentifierNode2;
        PExpression pexpressionNode3;
        PExpression pexpressionNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList6.get(0);

        pstatementNode1 = new ATableStatement(tidentifierNode2, pexpressionNode3, pexpressionNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new27()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TIdentifier tidentifierNode2;
        PExpression pexpressionNode3;
        PExpression pexpressionNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList4.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList7.get(0);

        pstatementNode1 = new ATableStatement(tidentifierNode2, pexpressionNode3, pexpressionNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new28()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PFunctionCall pfunctioncallNode2;
        pfunctioncallNode2 = (PFunctionCall)nodeArrayList1.get(0);

        pstatementNode1 = new AFunctionCallStatement(pfunctioncallNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new29()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        PFunctionCall pfunctioncallNode2;
        pfunctioncallNode2 = (PFunctionCall)nodeArrayList2.get(0);

        pstatementNode1 = new AFunctionCallStatement(pfunctioncallNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new30()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList2.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new31()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList2.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new32()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList2.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new33()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList2.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new34()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new35()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new36()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AAddExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new37()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ASubExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new38()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new39()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AMulExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new40()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ADivExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new41()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new42()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList2.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new43()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList2.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new44()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new45()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new46()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pexpressionNode1 = new AIdentifierExpression(tidentifierNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new47()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        TIdentifier tidentifierNode2;
        PExpression pexpressionNode3;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AArrayExpression(tidentifierNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new48()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new49()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pexpressionNode1 = new AIdentifierExpression(tidentifierNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new50()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PValue pvalueNode2;
        pvalueNode2 = (PValue)nodeArrayList1.get(0);

        pexpressionNode1 = new AValueExpression(pvalueNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new51()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList2.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new52()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PFunctionCall pfunctioncallNode2;
        pfunctioncallNode2 = (PFunctionCall)nodeArrayList1.get(0);

        pexpressionNode1 = new AFunctionCallExpression(pfunctioncallNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new53()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        TIdentifier tidentifierNode2;
        PExpression pexpressionNode3;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AArrayExpression(tidentifierNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new54()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PValue pvalueNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        pvalueNode2 = (PValue)nodeArrayList2.get(0);
        {
        }

        pexpressionNode1 = new AArgsExpression(pvalueNode2, listNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new55()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PValue pvalueNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        pvalueNode2 = (PValue)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        listNode3 = (TypedLinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pexpressionNode1 = new AArgsExpression(pvalueNode2, listNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new56()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PValue pvalueNode1;
        pvalueNode1 = (PValue)nodeArrayList2.get(0);
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    ArrayList new57()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparison pcomparisonNode1;
        pcomparisonNode1 = (PComparison)nodeArrayList1.get(0);
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    ArrayList new58()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparison pcomparisonNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pcomparisonNode1 = new AEqComparison(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    ArrayList new59()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparison pcomparisonNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pcomparisonNode1 = new ANeqComparison(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    ArrayList new60()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparison pcomparisonNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pcomparisonNode1 = new ALessComparison(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    ArrayList new61()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparison pcomparisonNode1;
        {
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pcomparisonNode1 = new AGreComparison(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    ArrayList new62()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparison pcomparisonNode1;
        {
        Object nullNode2 = null;

        pcomparisonNode1 = new ATrueComparison(null);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    ArrayList new63()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparison pcomparisonNode1;
        {
        Object nullNode2 = null;

        pcomparisonNode1 = new AFalseComparison(null);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    ArrayList new64()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunctionCall pfunctioncallNode1;
        {
        TIdentifier tidentifierNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
        }

        pfunctioncallNode1 = new AFunctionCall(tidentifierNode2, listNode3);
        }
	nodeList.add(pfunctioncallNode1);
        return nodeList;
    }



    ArrayList new65()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunctionCall pfunctioncallNode1;
        {
        TIdentifier tidentifierNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
        PArgList parglistNode3;
        parglistNode3 = (PArgList)nodeArrayList3.get(0);
	if(parglistNode3 != null)
	{
	  listNode4.add(parglistNode3);
	}
        }

        pfunctioncallNode1 = new AFunctionCall(tidentifierNode2, listNode4);
        }
	nodeList.add(pfunctioncallNode1);
        return nodeList;
    }



    ArrayList new66()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgList parglistNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
        }

        parglistNode1 = new AArgList(pexpressionNode2, listNode3);
        }
	nodeList.add(parglistNode1);
        return nodeList;
    }



    ArrayList new67()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgList parglistNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        listNode3 = (TypedLinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        parglistNode1 = new AArgList(pexpressionNode2, listNode4);
        }
	nodeList.add(parglistNode1);
        return nodeList;
    }



    ArrayList new68()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PValue pvalueNode1;
        {
        TIntegerLiteral tintegerliteralNode2;
        tintegerliteralNode2 = (TIntegerLiteral)nodeArrayList1.get(0);

        pvalueNode1 = new AIntegerLiteralValue(tintegerliteralNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    ArrayList new69()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PValue pvalueNode1;
        {
        TStringLiteral tstringliteralNode2;
        tstringliteralNode2 = (TStringLiteral)nodeArrayList1.get(0);

        pvalueNode1 = new AStringValueValue(tstringliteralNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    ArrayList new70()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PGoal1 pgoal1Node1;
        pgoal1Node1 = (PGoal1)nodeArrayList1.get(0);
	if(pgoal1Node1 != null)
	{
	  listNode2.add(pgoal1Node1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new71()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PGoal1 pgoal1Node2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pgoal1Node2 = (PGoal1)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pgoal1Node2 != null)
	{
	  listNode3.add(pgoal1Node2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new72()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PIdValue pidvalueNode1;
        pidvalueNode1 = (PIdValue)nodeArrayList1.get(0);
	if(pidvalueNode1 != null)
	{
	  listNode2.add(pidvalueNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new73()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PIdValue pidvalueNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pidvalueNode2 = (PIdValue)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pidvalueNode2 != null)
	{
	  listNode3.add(pidvalueNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new74()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        TTab ttabNode1;
        ttabNode1 = (TTab)nodeArrayList1.get(0);
	if(ttabNode1 != null)
	{
	  listNode2.add(ttabNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new75()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        TTab ttabNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        ttabNode2 = (TTab)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(ttabNode2 != null)
	{
	  listNode3.add(ttabNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new76()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	if(pexpressionNode1 != null)
	{
	  listNode2.add(pexpressionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new77()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PExpression pexpressionNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpressionNode2 != null)
	{
	  listNode3.add(pexpressionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new78()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PValue pvalueNode1;
        pvalueNode1 = (PValue)nodeArrayList1.get(0);
	if(pvalueNode1 != null)
	{
	  listNode2.add(pvalueNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new79()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PValue pvalueNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pvalueNode2 = (PValue)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvalueNode2 != null)
	{
	  listNode3.add(pvalueNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {0, SHIFT, 1}, {12, SHIFT, 2}, {18, SHIFT, 3}, {19, SHIFT, 4}, {20, SHIFT, 5}, {21, SHIFT, 6}, {22, SHIFT, 7}, {31, SHIFT, 8}, },
			{{-1, REDUCE, 74}, },
			{{-1, ERROR, 2}, {31, SHIFT, 15}, },
			{{-1, ERROR, 3}, {3, SHIFT, 16}, {4, SHIFT, 17}, {13, SHIFT, 18}, {15, SHIFT, 19}, {25, SHIFT, 20}, {27, SHIFT, 21}, {29, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, ERROR, 4}, {3, SHIFT, 16}, {4, SHIFT, 17}, {13, SHIFT, 18}, {15, SHIFT, 19}, {25, SHIFT, 20}, {27, SHIFT, 21}, {29, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, ERROR, 5}, {31, SHIFT, 37}, },
			{{-1, ERROR, 6}, {3, SHIFT, 16}, {4, SHIFT, 17}, {13, SHIFT, 18}, {15, SHIFT, 19}, {29, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, ERROR, 7}, {3, SHIFT, 16}, {4, SHIFT, 17}, {13, SHIFT, 18}, {15, SHIFT, 19}, {29, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, ERROR, 8}, {1, SHIFT, 40}, {2, SHIFT, 41}, {11, SHIFT, 42}, {13, SHIFT, 43}, {15, SHIFT, 44}, },
			{{-1, ERROR, 9}, {33, ACCEPT, -1}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 1}, {0, SHIFT, 1}, {12, SHIFT, 2}, {18, SHIFT, 3}, {19, SHIFT, 4}, {20, SHIFT, 5}, {21, SHIFT, 6}, {22, SHIFT, 7}, {31, SHIFT, 8}, },
			{{-1, ERROR, 14}, {0, SHIFT, 47}, {18, SHIFT, 48}, {19, SHIFT, 49}, {20, SHIFT, 50}, {21, SHIFT, 51}, {22, SHIFT, 52}, {31, SHIFT, 53}, },
			{{-1, ERROR, 15}, {13, SHIFT, 55}, },
			{{-1, ERROR, 16}, {31, SHIFT, 56}, },
			{{-1, ERROR, 17}, {31, SHIFT, 56}, },
			{{-1, ERROR, 18}, {3, SHIFT, 16}, {4, SHIFT, 17}, {13, SHIFT, 18}, {15, SHIFT, 19}, {29, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, ERROR, 19}, {29, SHIFT, 22}, {32, SHIFT, 24}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 49}, {3, REDUCE, 46}, {4, REDUCE, 46}, {13, SHIFT, 43}, {15, SHIFT, 61}, },
			{{-1, REDUCE, 69}, },
			{{-1, ERROR, 25}, {5, SHIFT, 62}, {6, SHIFT, 63}, {23, SHIFT, 64}, {24, SHIFT, 65}, },
			{{-1, REDUCE, 34}, {7, SHIFT, 66}, {8, SHIFT, 67}, },
			{{-1, REDUCE, 35}, {9, SHIFT, 68}, {10, SHIFT, 69}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 29}, {3, SHIFT, 70}, {4, SHIFT, 71}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 48}, },
			{{-1, ERROR, 32}, {26, SHIFT, 72}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 36}, {26, SHIFT, 73}, },
			{{-1, ERROR, 37}, {28, SHIFT, 74}, },
			{{-1, REDUCE, 20}, {17, SHIFT, 75}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 40}, {3, SHIFT, 16}, {4, SHIFT, 17}, {13, SHIFT, 18}, {15, SHIFT, 19}, {29, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, ERROR, 41}, {3, SHIFT, 16}, {4, SHIFT, 17}, {13, SHIFT, 18}, {15, SHIFT, 19}, {29, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, ERROR, 42}, {3, SHIFT, 16}, {4, SHIFT, 17}, {13, SHIFT, 18}, {15, SHIFT, 19}, {29, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, ERROR, 43}, {3, SHIFT, 16}, {4, SHIFT, 17}, {13, SHIFT, 18}, {14, SHIFT, 81}, {15, SHIFT, 19}, {29, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, ERROR, 44}, {3, SHIFT, 16}, {4, SHIFT, 17}, {13, SHIFT, 18}, {15, SHIFT, 19}, {29, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 75}, },
			{{-1, ERROR, 48}, {3, SHIFT, 16}, {4, SHIFT, 17}, {13, SHIFT, 18}, {15, SHIFT, 19}, {25, SHIFT, 20}, {27, SHIFT, 21}, {29, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, ERROR, 49}, {3, SHIFT, 16}, {4, SHIFT, 17}, {13, SHIFT, 18}, {15, SHIFT, 19}, {25, SHIFT, 20}, {27, SHIFT, 21}, {29, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, ERROR, 50}, {31, SHIFT, 87}, },
			{{-1, ERROR, 51}, {3, SHIFT, 16}, {4, SHIFT, 17}, {13, SHIFT, 18}, {15, SHIFT, 19}, {29, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, ERROR, 52}, {3, SHIFT, 16}, {4, SHIFT, 17}, {13, SHIFT, 18}, {15, SHIFT, 19}, {29, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, ERROR, 53}, {1, SHIFT, 40}, {2, SHIFT, 41}, {11, SHIFT, 42}, {13, SHIFT, 43}, {15, SHIFT, 90}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 55}, {14, SHIFT, 92}, {31, SHIFT, 93}, },
			{{-1, REDUCE, 46}, {15, SHIFT, 95}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 59}, {14, SHIFT, 96}, },
			{{-1, ERROR, 60}, {16, SHIFT, 97}, {17, SHIFT, 98}, },
			{{-1, ERROR, 61}, {3, SHIFT, 16}, {4, SHIFT, 17}, {13, SHIFT, 18}, {15, SHIFT, 19}, {29, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, ERROR, 62}, {3, SHIFT, 16}, {4, SHIFT, 17}, {13, SHIFT, 18}, {15, SHIFT, 19}, {29, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, ERROR, 63}, {3, SHIFT, 16}, {4, SHIFT, 17}, {13, SHIFT, 18}, {15, SHIFT, 19}, {29, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, ERROR, 64}, {3, SHIFT, 16}, {4, SHIFT, 17}, {13, SHIFT, 18}, {15, SHIFT, 19}, {29, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, ERROR, 65}, {3, SHIFT, 16}, {4, SHIFT, 17}, {13, SHIFT, 18}, {15, SHIFT, 19}, {29, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, ERROR, 66}, {3, SHIFT, 16}, {4, SHIFT, 17}, {13, SHIFT, 18}, {15, SHIFT, 19}, {29, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, ERROR, 67}, {3, SHIFT, 16}, {4, SHIFT, 17}, {13, SHIFT, 18}, {15, SHIFT, 19}, {29, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, ERROR, 68}, {3, SHIFT, 16}, {4, SHIFT, 17}, {13, SHIFT, 18}, {15, SHIFT, 19}, {29, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, ERROR, 69}, {3, SHIFT, 16}, {4, SHIFT, 17}, {13, SHIFT, 18}, {15, SHIFT, 19}, {29, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 72}, {0, SHIFT, 1}, {18, SHIFT, 3}, {19, SHIFT, 4}, {20, SHIFT, 5}, {21, SHIFT, 6}, {22, SHIFT, 7}, {31, SHIFT, 8}, },
			{{-1, ERROR, 73}, {0, SHIFT, 1}, {18, SHIFT, 3}, {19, SHIFT, 4}, {20, SHIFT, 5}, {21, SHIFT, 6}, {22, SHIFT, 7}, {31, SHIFT, 8}, },
			{{-1, ERROR, 74}, {31, SHIFT, 112}, },
			{{-1, ERROR, 75}, {3, SHIFT, 16}, {4, SHIFT, 17}, {13, SHIFT, 18}, {15, SHIFT, 19}, {29, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 22}, {17, SHIFT, 75}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 66}, {17, SHIFT, 75}, },
			{{-1, ERROR, 83}, {14, SHIFT, 116}, },
			{{-1, ERROR, 84}, {16, SHIFT, 117}, },
			{{-1, ERROR, 85}, {26, SHIFT, 118}, },
			{{-1, ERROR, 86}, {26, SHIFT, 119}, },
			{{-1, ERROR, 87}, {28, SHIFT, 120}, },
			{{-1, REDUCE, 21}, {17, SHIFT, 75}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 90}, {3, SHIFT, 16}, {4, SHIFT, 17}, {13, SHIFT, 18}, {15, SHIFT, 19}, {29, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 92}, {26, SHIFT, 123}, },
			{{-1, REDUCE, 5}, {11, SHIFT, 124}, {17, SHIFT, 125}, },
			{{-1, ERROR, 94}, {14, SHIFT, 129}, },
			{{-1, ERROR, 95}, {3, SHIFT, 16}, {4, SHIFT, 17}, {13, SHIFT, 18}, {15, SHIFT, 19}, {29, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 98}, {29, SHIFT, 22}, {32, SHIFT, 24}, },
			{{-1, REDUCE, 78}, },
			{{-1, ERROR, 100}, {16, SHIFT, 132}, {17, SHIFT, 98}, },
			{{-1, ERROR, 101}, {16, SHIFT, 134}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 36}, {9, SHIFT, 68}, {10, SHIFT, 69}, },
			{{-1, REDUCE, 37}, {9, SHIFT, 68}, {10, SHIFT, 69}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 112}, {26, SHIFT, 135}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 77}, },
			{{-1, REDUCE, 67}, {17, SHIFT, 75}, },
			{{-1, REDUCE, 65}, },
			{{-1, ERROR, 117}, {11, SHIFT, 136}, },
			{{-1, ERROR, 118}, {0, SHIFT, 1}, {18, SHIFT, 3}, {19, SHIFT, 4}, {20, SHIFT, 5}, {21, SHIFT, 6}, {22, SHIFT, 7}, {31, SHIFT, 8}, },
			{{-1, ERROR, 119}, {0, SHIFT, 1}, {18, SHIFT, 3}, {19, SHIFT, 4}, {20, SHIFT, 5}, {21, SHIFT, 6}, {22, SHIFT, 7}, {31, SHIFT, 8}, },
			{{-1, ERROR, 120}, {31, SHIFT, 139}, },
			{{-1, REDUCE, 23}, {17, SHIFT, 75}, },
			{{-1, ERROR, 122}, {16, SHIFT, 140}, },
			{{-1, ERROR, 123}, {0, SHIFT, 1}, {18, SHIFT, 3}, {19, SHIFT, 4}, {20, SHIFT, 5}, {21, SHIFT, 6}, {22, SHIFT, 7}, {31, SHIFT, 8}, },
			{{-1, ERROR, 124}, {29, SHIFT, 22}, {32, SHIFT, 24}, },
			{{-1, ERROR, 125}, {31, SHIFT, 143}, },
			{{-1, REDUCE, 6}, {17, SHIFT, 125}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 7}, {17, SHIFT, 125}, },
			{{-1, ERROR, 129}, {26, SHIFT, 146}, },
			{{-1, ERROR, 130}, {16, SHIFT, 147}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 53}, {3, REDUCE, 47}, {4, REDUCE, 47}, },
			{{-1, ERROR, 135}, {0, SHIFT, 1}, {18, SHIFT, 3}, {19, SHIFT, 4}, {20, SHIFT, 5}, {21, SHIFT, 6}, {22, SHIFT, 7}, {31, SHIFT, 8}, },
			{{-1, ERROR, 136}, {3, SHIFT, 16}, {4, SHIFT, 17}, {13, SHIFT, 18}, {15, SHIFT, 19}, {29, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 139}, {26, SHIFT, 150}, },
			{{-1, ERROR, 140}, {11, SHIFT, 151}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 10}, {11, SHIFT, 124}, },
			{{-1, REDUCE, 8}, {17, SHIFT, 125}, },
			{{-1, REDUCE, 73}, },
			{{-1, ERROR, 146}, {0, SHIFT, 1}, {18, SHIFT, 3}, {19, SHIFT, 4}, {20, SHIFT, 5}, {21, SHIFT, 6}, {22, SHIFT, 7}, {31, SHIFT, 8}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 150}, {0, SHIFT, 1}, {18, SHIFT, 3}, {19, SHIFT, 4}, {20, SHIFT, 5}, {21, SHIFT, 6}, {22, SHIFT, 7}, {31, SHIFT, 8}, },
			{{-1, ERROR, 151}, {3, SHIFT, 16}, {4, SHIFT, 17}, {13, SHIFT, 18}, {15, SHIFT, 19}, {29, SHIFT, 22}, {31, SHIFT, 23}, {32, SHIFT, 24}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 27}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 9}, },
			{{-1, 10}, {13, 46}, },
			{{-1, 94}, },
			{{-1, 126}, {143, 152}, },
			{{-1, 127}, {128, 145}, {144, 145}, },
			{{-1, 11}, {72, 110}, {73, 111}, {118, 137}, {119, 138}, {123, 141}, {135, 148}, {146, 153}, {150, 154}, },
			{{-1, 76}, {77, 114}, {115, 114}, {121, 114}, },
			{{-1, 45}, {53, 91}, },
			{{-1, 25}, {6, 38}, {7, 39}, {18, 59}, {40, 78}, {41, 79}, {42, 80}, {43, 82}, {44, 84}, {51, 88}, {52, 89}, {61, 101}, {62, 102}, {63, 103}, {64, 104}, {65, 105}, {75, 113}, {90, 122}, {95, 130}, {136, 149}, {151, 155}, },
			{{-1, 26}, },
			{{-1, 27}, {66, 106}, {67, 107}, },
			{{-1, 28}, {68, 108}, {69, 109}, },
			{{-1, 29}, {16, 57}, {17, 58}, },
			{{-1, 30}, },
			{{-1, 31}, },
			{{-1, 99}, {100, 133}, },
			{{-1, 32}, {4, 36}, {48, 85}, {49, 86}, },
			{{-1, 33}, },
			{{-1, 34}, {0, 12}, {13, 12}, {14, 54}, {72, 12}, {73, 12}, {118, 12}, {119, 12}, {123, 12}, {135, 12}, {146, 12}, {150, 12}, },
			{{-1, 83}, },
			{{-1, 35}, {19, 60}, {98, 131}, {124, 142}, },
			{{-1, 13}, },
			{{-1, 128}, {126, 144}, },
			{{-1, 14}, },
			{{-1, 77}, {82, 115}, {88, 121}, },
			{{-1, 100}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: tab, 'def', 'if', 'while', 'for', 'print', 'return', identifier, EOF",
			"expecting: tab, 'if', 'while', 'for', 'print', 'return', identifier",
			"expecting: identifier",
			"expecting: '++', '--', '(', '[', 'true', 'false', integer literal, identifier, string literal",
			"expecting: '++', '--', '(', '[', integer literal, identifier, string literal",
			"expecting: '-=', '/=', '=', '(', '['",
			"expecting: EOF",
			"expecting: '('",
			"expecting: integer literal, string literal",
			"expecting: ':'",
			"expecting: tab, '!=', '==', '+', '-', '*', '/', 'def', ')', ']', ',', 'if', 'while', 'for', 'print', 'return', '<', '>', ':', identifier, EOF",
			"expecting: tab, '++', '--', '!=', '==', '+', '-', '*', '/', 'def', '(', ')', '[', ']', ',', 'if', 'while', 'for', 'print', 'return', '<', '>', ':', identifier, EOF",
			"expecting: '!=', '==', '<', '>'",
			"expecting: tab, '!=', '==', '+', '-', 'def', ')', ']', ',', 'if', 'while', 'for', 'print', 'return', '<', '>', ':', identifier, EOF",
			"expecting: '++', '--'",
			"expecting: 'in'",
			"expecting: tab, 'def', ',', 'if', 'while', 'for', 'print', 'return', identifier, EOF",
			"expecting: '++', '--', '(', ')', '[', integer literal, identifier, string literal",
			"expecting: ')', identifier",
			"expecting: tab, '!=', '==', '+', '-', '*', '/', 'def', ')', '[', ']', ',', 'if', 'while', 'for', 'print', 'return', '<', '>', ':', identifier, EOF",
			"expecting: ')'",
			"expecting: ']', ','",
			"expecting: tab, 'def', ')', ',', 'if', 'while', 'for', 'print', 'return', identifier, EOF",
			"expecting: ')', ','",
			"expecting: ']'",
			"expecting: '=', ')', ','",
			"expecting: '='",
			"expecting: tab, '++', '--', '!=', '==', '+', '-', '*', '/', 'def', ')', ']', ',', 'if', 'while', 'for', 'print', 'return', '<', '>', ':', identifier, EOF",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 3, 2, 4, 4, 5, 6, 0, 0, 0, 0, 1, 7, 2, 2, 4, 8, 9, 9, 10, 11, 10, 12, 13, 10, 10, 14, 10, 10, 9, 9, 10, 10, 9, 15, 16, 0, 4, 4, 4, 17, 4, 0, 0, 1, 3, 3, 2, 4, 4, 5, 0, 18, 19, 10, 10, 20, 21, 4, 4, 4, 4, 4, 4, 4, 4, 4, 10, 10, 1, 1, 2, 4, 22, 16, 0, 0, 0, 10, 23, 20, 24, 9, 9, 15, 16, 0, 4, 0, 9, 25, 20, 4, 10, 10, 8, 21, 21, 24, 9, 9, 9, 9, 10, 10, 10, 10, 0, 0, 9, 22, 22, 23, 10, 26, 1, 1, 2, 16, 24, 1, 8, 2, 23, 23, 23, 9, 24, 21, 10, 21, 27, 1, 4, 0, 0, 9, 26, 0, 23, 25, 23, 23, 1, 10, 0, 0, 1, 4, 23, 0, 0, 0, 
        };*/
}
