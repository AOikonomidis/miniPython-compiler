/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.analysis;

import java.util.*;
import minipython.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(Node node)
    {
    }

    public void defaultOut(Node node)
    {
    }

    public void caseStart(Start node)
    {
        inStart(node);
        node.getPGoal().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAGoal(AGoal node)
    {
        defaultIn(node);
    }

    public void outAGoal(AGoal node)
    {
        defaultOut(node);
    }

    public void caseAGoal(AGoal node)
    {
        inAGoal(node);
        {
            Object temp[] = node.getGoal1().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PGoal1) temp[i]).apply(this);
            }
        }
        outAGoal(node);
    }

    public void inAFunctGoal1(AFunctGoal1 node)
    {
        defaultIn(node);
    }

    public void outAFunctGoal1(AFunctGoal1 node)
    {
        defaultOut(node);
    }

    public void caseAFunctGoal1(AFunctGoal1 node)
    {
        inAFunctGoal1(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            Object temp[] = node.getArgument().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PArgument) temp[i]).apply(this);
            }
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAFunctGoal1(node);
    }

    public void inAStatGoal1(AStatGoal1 node)
    {
        defaultIn(node);
    }

    public void outAStatGoal1(AStatGoal1 node)
    {
        defaultOut(node);
    }

    public void caseAStatGoal1(AStatGoal1 node)
    {
        inAStatGoal1(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAStatGoal1(node);
    }

    public void inAArgument(AArgument node)
    {
        defaultIn(node);
    }

    public void outAArgument(AArgument node)
    {
        defaultOut(node);
    }

    public void caseAArgument(AArgument node)
    {
        inAArgument(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            Object temp[] = node.getValue().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PValue) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getIdValue().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PIdValue) temp[i]).apply(this);
            }
        }
        outAArgument(node);
    }

    public void inAIdValue(AIdValue node)
    {
        defaultIn(node);
    }

    public void outAIdValue(AIdValue node)
    {
        defaultOut(node);
    }

    public void caseAIdValue(AIdValue node)
    {
        inAIdValue(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            Object temp[] = node.getValue().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PValue) temp[i]).apply(this);
            }
        }
        outAIdValue(node);
    }

    public void inAIfStatement(AIfStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatement(AIfStatement node)
    {
        defaultOut(node);
    }

    public void caseAIfStatement(AIfStatement node)
    {
        inAIfStatement(node);
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAIfStatement(node);
    }

    public void inAWhileStatement(AWhileStatement node)
    {
        defaultIn(node);
    }

    public void outAWhileStatement(AWhileStatement node)
    {
        defaultOut(node);
    }

    public void caseAWhileStatement(AWhileStatement node)
    {
        inAWhileStatement(node);
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAWhileStatement(node);
    }

    public void inAForStatement(AForStatement node)
    {
        defaultIn(node);
    }

    public void outAForStatement(AForStatement node)
    {
        defaultOut(node);
    }

    public void caseAForStatement(AForStatement node)
    {
        inAForStatement(node);
        if(node.getId1() != null)
        {
            node.getId1().apply(this);
        }
        if(node.getId2() != null)
        {
            node.getId2().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAForStatement(node);
    }

    public void inAReturnStatement(AReturnStatement node)
    {
        defaultIn(node);
    }

    public void outAReturnStatement(AReturnStatement node)
    {
        defaultOut(node);
    }

    public void caseAReturnStatement(AReturnStatement node)
    {
        inAReturnStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAReturnStatement(node);
    }

    public void inAPrintStatement(APrintStatement node)
    {
        defaultIn(node);
    }

    public void outAPrintStatement(APrintStatement node)
    {
        defaultOut(node);
    }

    public void caseAPrintStatement(APrintStatement node)
    {
        inAPrintStatement(node);
        if(node.getE1() != null)
        {
            node.getE1().apply(this);
        }
        {
            Object temp[] = node.getE2().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PExpression) temp[i]).apply(this);
            }
        }
        outAPrintStatement(node);
    }

    public void inAAssignmentStatement(AAssignmentStatement node)
    {
        defaultIn(node);
    }

    public void outAAssignmentStatement(AAssignmentStatement node)
    {
        defaultOut(node);
    }

    public void caseAAssignmentStatement(AAssignmentStatement node)
    {
        inAAssignmentStatement(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAAssignmentStatement(node);
    }

    public void inATableStatement(ATableStatement node)
    {
        defaultIn(node);
    }

    public void outATableStatement(ATableStatement node)
    {
        defaultOut(node);
    }

    public void caseATableStatement(ATableStatement node)
    {
        inATableStatement(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outATableStatement(node);
    }

    public void inAFunctionCallStatement(AFunctionCallStatement node)
    {
        defaultIn(node);
    }

    public void outAFunctionCallStatement(AFunctionCallStatement node)
    {
        defaultOut(node);
    }

    public void caseAFunctionCallStatement(AFunctionCallStatement node)
    {
        inAFunctionCallStatement(node);
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        outAFunctionCallStatement(node);
    }

    public void inAAddExpression(AAddExpression node)
    {
        defaultIn(node);
    }

    public void outAAddExpression(AAddExpression node)
    {
        defaultOut(node);
    }

    public void caseAAddExpression(AAddExpression node)
    {
        inAAddExpression(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAAddExpression(node);
    }

    public void inASubExpression(ASubExpression node)
    {
        defaultIn(node);
    }

    public void outASubExpression(ASubExpression node)
    {
        defaultOut(node);
    }

    public void caseASubExpression(ASubExpression node)
    {
        inASubExpression(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outASubExpression(node);
    }

    public void inAMulExpression(AMulExpression node)
    {
        defaultIn(node);
    }

    public void outAMulExpression(AMulExpression node)
    {
        defaultOut(node);
    }

    public void caseAMulExpression(AMulExpression node)
    {
        inAMulExpression(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outAMulExpression(node);
    }

    public void inADivExpression(ADivExpression node)
    {
        defaultIn(node);
    }

    public void outADivExpression(ADivExpression node)
    {
        defaultOut(node);
    }

    public void caseADivExpression(ADivExpression node)
    {
        inADivExpression(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        outADivExpression(node);
    }

    public void inAIncrementExpression(AIncrementExpression node)
    {
        defaultIn(node);
    }

    public void outAIncrementExpression(AIncrementExpression node)
    {
        defaultOut(node);
    }

    public void caseAIncrementExpression(AIncrementExpression node)
    {
        inAIncrementExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAIncrementExpression(node);
    }

    public void inADecrementExpression(ADecrementExpression node)
    {
        defaultIn(node);
    }

    public void outADecrementExpression(ADecrementExpression node)
    {
        defaultOut(node);
    }

    public void caseADecrementExpression(ADecrementExpression node)
    {
        inADecrementExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outADecrementExpression(node);
    }

    public void inAArrayExpression(AArrayExpression node)
    {
        defaultIn(node);
    }

    public void outAArrayExpression(AArrayExpression node)
    {
        defaultOut(node);
    }

    public void caseAArrayExpression(AArrayExpression node)
    {
        inAArrayExpression(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAArrayExpression(node);
    }

    public void inAFunctionCallExpression(AFunctionCallExpression node)
    {
        defaultIn(node);
    }

    public void outAFunctionCallExpression(AFunctionCallExpression node)
    {
        defaultOut(node);
    }

    public void caseAFunctionCallExpression(AFunctionCallExpression node)
    {
        inAFunctionCallExpression(node);
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        outAFunctionCallExpression(node);
    }

    public void inAValueExpression(AValueExpression node)
    {
        defaultIn(node);
    }

    public void outAValueExpression(AValueExpression node)
    {
        defaultOut(node);
    }

    public void caseAValueExpression(AValueExpression node)
    {
        inAValueExpression(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAValueExpression(node);
    }

    public void inAIdentifierExpression(AIdentifierExpression node)
    {
        defaultIn(node);
    }

    public void outAIdentifierExpression(AIdentifierExpression node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierExpression(AIdentifierExpression node)
    {
        inAIdentifierExpression(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierExpression(node);
    }

    public void inAParExpression(AParExpression node)
    {
        defaultIn(node);
    }

    public void outAParExpression(AParExpression node)
    {
        defaultOut(node);
    }

    public void caseAParExpression(AParExpression node)
    {
        inAParExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAParExpression(node);
    }

    public void inAArgsExpression(AArgsExpression node)
    {
        defaultIn(node);
    }

    public void outAArgsExpression(AArgsExpression node)
    {
        defaultOut(node);
    }

    public void caseAArgsExpression(AArgsExpression node)
    {
        inAArgsExpression(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        {
            Object temp[] = node.getR().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PValue) temp[i]).apply(this);
            }
        }
        outAArgsExpression(node);
    }

    public void inAGreComparison(AGreComparison node)
    {
        defaultIn(node);
    }

    public void outAGreComparison(AGreComparison node)
    {
        defaultOut(node);
    }

    public void caseAGreComparison(AGreComparison node)
    {
        inAGreComparison(node);
        if(node.getLexp() != null)
        {
            node.getLexp().apply(this);
        }
        if(node.getRexpr() != null)
        {
            node.getRexpr().apply(this);
        }
        outAGreComparison(node);
    }

    public void inALessComparison(ALessComparison node)
    {
        defaultIn(node);
    }

    public void outALessComparison(ALessComparison node)
    {
        defaultOut(node);
    }

    public void caseALessComparison(ALessComparison node)
    {
        inALessComparison(node);
        if(node.getLexp() != null)
        {
            node.getLexp().apply(this);
        }
        if(node.getRexpr() != null)
        {
            node.getRexpr().apply(this);
        }
        outALessComparison(node);
    }

    public void inANeqComparison(ANeqComparison node)
    {
        defaultIn(node);
    }

    public void outANeqComparison(ANeqComparison node)
    {
        defaultOut(node);
    }

    public void caseANeqComparison(ANeqComparison node)
    {
        inANeqComparison(node);
        if(node.getLexp() != null)
        {
            node.getLexp().apply(this);
        }
        if(node.getRexpr() != null)
        {
            node.getRexpr().apply(this);
        }
        outANeqComparison(node);
    }

    public void inAEqComparison(AEqComparison node)
    {
        defaultIn(node);
    }

    public void outAEqComparison(AEqComparison node)
    {
        defaultOut(node);
    }

    public void caseAEqComparison(AEqComparison node)
    {
        inAEqComparison(node);
        if(node.getLexp() != null)
        {
            node.getLexp().apply(this);
        }
        if(node.getRexpr() != null)
        {
            node.getRexpr().apply(this);
        }
        outAEqComparison(node);
    }

    public void inATrueComparison(ATrueComparison node)
    {
        defaultIn(node);
    }

    public void outATrueComparison(ATrueComparison node)
    {
        defaultOut(node);
    }

    public void caseATrueComparison(ATrueComparison node)
    {
        inATrueComparison(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueComparison(node);
    }

    public void inAFalseComparison(AFalseComparison node)
    {
        defaultIn(node);
    }

    public void outAFalseComparison(AFalseComparison node)
    {
        defaultOut(node);
    }

    public void caseAFalseComparison(AFalseComparison node)
    {
        inAFalseComparison(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseComparison(node);
    }

    public void inAFunctionCall(AFunctionCall node)
    {
        defaultIn(node);
    }

    public void outAFunctionCall(AFunctionCall node)
    {
        defaultOut(node);
    }

    public void caseAFunctionCall(AFunctionCall node)
    {
        inAFunctionCall(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            Object temp[] = node.getArgList().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PArgList) temp[i]).apply(this);
            }
        }
        outAFunctionCall(node);
    }

    public void inAArgList(AArgList node)
    {
        defaultIn(node);
    }

    public void outAArgList(AArgList node)
    {
        defaultOut(node);
    }

    public void caseAArgList(AArgList node)
    {
        inAArgList(node);
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        {
            Object temp[] = node.getR().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PExpression) temp[i]).apply(this);
            }
        }
        outAArgList(node);
    }

    public void inAIntegerLiteralValue(AIntegerLiteralValue node)
    {
        defaultIn(node);
    }

    public void outAIntegerLiteralValue(AIntegerLiteralValue node)
    {
        defaultOut(node);
    }

    public void caseAIntegerLiteralValue(AIntegerLiteralValue node)
    {
        inAIntegerLiteralValue(node);
        if(node.getIntegerLiteral() != null)
        {
            node.getIntegerLiteral().apply(this);
        }
        outAIntegerLiteralValue(node);
    }

    public void inAStringValueValue(AStringValueValue node)
    {
        defaultIn(node);
    }

    public void outAStringValueValue(AStringValueValue node)
    {
        defaultOut(node);
    }

    public void caseAStringValueValue(AStringValueValue node)
    {
        inAStringValueValue(node);
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outAStringValueValue(node);
    }
}
