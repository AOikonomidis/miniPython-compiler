/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.analysis;

import minipython.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object in);
    Object getOut(Node node);
    void setOut(Node node, Object out);

    void caseStart(Start node);
    void caseAGoal(AGoal node);
    void caseAFunctGoal1(AFunctGoal1 node);
    void caseAStatGoal1(AStatGoal1 node);
    void caseAArgument(AArgument node);
    void caseAIdValue(AIdValue node);
    void caseAIfStatement(AIfStatement node);
    void caseAWhileStatement(AWhileStatement node);
    void caseAForStatement(AForStatement node);
    void caseAReturnStatement(AReturnStatement node);
    void caseAPrintStatement(APrintStatement node);
    void caseAAssignmentStatement(AAssignmentStatement node);
    void caseATableStatement(ATableStatement node);
    void caseAFunctionCallStatement(AFunctionCallStatement node);
    void caseAAddExpression(AAddExpression node);
    void caseASubExpression(ASubExpression node);
    void caseAMulExpression(AMulExpression node);
    void caseADivExpression(ADivExpression node);
    void caseAIncrementExpression(AIncrementExpression node);
    void caseADecrementExpression(ADecrementExpression node);
    void caseAArrayExpression(AArrayExpression node);
    void caseAFunctionCallExpression(AFunctionCallExpression node);
    void caseAValueExpression(AValueExpression node);
    void caseAIdentifierExpression(AIdentifierExpression node);
    void caseAParExpression(AParExpression node);
    void caseAArgsExpression(AArgsExpression node);
    void caseAGreComparison(AGreComparison node);
    void caseALessComparison(ALessComparison node);
    void caseANeqComparison(ANeqComparison node);
    void caseAEqComparison(AEqComparison node);
    void caseATrueComparison(ATrueComparison node);
    void caseAFalseComparison(AFalseComparison node);
    void caseAFunctionCall(AFunctionCall node);
    void caseAArgList(AArgList node);
    void caseAIntegerLiteralValue(AIntegerLiteralValue node);
    void caseAStringValueValue(AStringValueValue node);

    void caseTTab(TTab node);
    void caseTMinusEq(TMinusEq node);
    void caseTDivEq(TDivEq node);
    void caseTAug(TAug node);
    void caseTDec(TDec node);
    void caseTNotEq(TNotEq node);
    void caseTEqComp(TEqComp node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTEq(TEq node);
    void caseTDef(TDef node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLBr(TLBr node);
    void caseTRBr(TRBr node);
    void caseTComma(TComma node);
    void caseTIf(TIf node);
    void caseTWhile(TWhile node);
    void caseTFor(TFor node);
    void caseTPrint(TPrint node);
    void caseTReturn(TReturn node);
    void caseTLess(TLess node);
    void caseTGreat(TGreat node);
    void caseTTrue(TTrue node);
    void caseTSemi(TSemi node);
    void caseTFalse(TFalse node);
    void caseTIn(TIn node);
    void caseTLineComment(TLineComment node);
    void caseTIntegerLiteral(TIntegerLiteral node);
    void caseTNumber(TNumber node);
    void caseTIdentifier(TIdentifier node);
    void caseTStringLiteral(TStringLiteral node);
    void caseTBlank(TBlank node);
    void caseEOF(EOF node);
}
